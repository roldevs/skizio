# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    environment:
      #CC_TEST_REPORTER_ID: 3e54...
      #HEROKU_API_KEY: abee...
      #HEROKU_APP_NAME: ...
      CHROME_BIN: "/usr/bin/google-chrome"

    docker:
      # specify the version you desire here
      - image: circleci/node:10.2.1-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # run tests!
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run: mkdir ~/junit
      # - run:
      #     name: Upload Code Climate test-coverage
      #     command: |
      #       # notify Code Climate of a pending test report using `before-build`
      #       ./cc-test-reporter before-build
      #       node_modules/.bin/karma start
      #       cp coverage/report-lcov/lcov.info coverage/lcov.info
      #       # upload test report to Code Climate using `after-build`
      #       ./cc-test-reporter after-build -t lcov --exit-code $?
      - run:
          command: node_modules/.bin/mocha -r ts-node/register src/lib/**/spec/**/*.spec.ts src/lib/**/spec/**/**/*.spec.ts --reporter mocha-junit-reporter --reporter-options mochaFile=~/junit/test-results.xml
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - run:
          name: Deploy Master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

